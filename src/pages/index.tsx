import Head from 'next/head';
import { useContext, useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { GetServerSideProps } from 'next';

import SearchBar from '../components/SearchBar/SearchBar';
import ResultsList from '../components/ResultList/ResultList';
import ErrorBoundary from '../components/ErrorBoundary/ErrorBoundary';
import Flyout from '../components/Flyout/Flyout';
import { ThemeContext } from '../providers/ThemeProvider';
import { useActions } from '../hooks/useActions';
import { useAppSelector } from '../hooks/useAppSelector';
import styles from '../styles/Home.module.css';
import RecipeDetails from '../components/RecipeDetails/RecipeDetails';
import { IRecipeData, IRecipeDetails } from '../types/RecipeTypes';

interface HomeProps {
  data: IRecipeData;
  query: string;
  page: number;
}

const Home: React.FC<HomeProps> = ({ data, query, page }) => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const { openDetails, closeDetails } = useActions();
  const { isOpen } = useAppSelector((state) => state.openDetails);

  const themeContext = useContext(ThemeContext);
  if (!themeContext) {
    throw new Error('useContext must be used within a ThemeProvider');
  }
  const theme = themeContext.isLightTheme;

  useEffect(() => {
    if (router.query.details) {
      openDetails();
    } else {
      closeDetails();
    }
  }, [router.query.details]);

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={theme ? styles.lightTheme : styles.darkTheme}>
        <div className={styles.container}>
          <h1>Recipes</h1>
          <ErrorBoundary>
            <SearchBar />
            <div className={`${styles.mainContent} ${isOpen ? styles.shifted : ''}`}>
              <ResultsList recipes={data.recipes} query={query} page={page} />
              {isOpen && (
                <RecipeDetails id={router.query.details as string} recipes={data.recipes} />
              )}
            </div>
            <Flyout />
          </ErrorBoundary>
        </div>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { page = 1, query = '' } = context.query;

  try {
    const response = await fetch(
      `https://dummyjson.com/recipes/search?q=${query}&limit=${10}&skip=${(Number(page) - 1) * 10}`,
    );
    const data = await response.json();

    return {
      props: {
        page: Number(page),
        data,
        query: query as string,
      },
    };
  } catch (error) {
    console.error(error);
    return {
      props: {
        page: Number(page),
        data: { recipes: [], limit: 0, skip: 0, total: 0 },
        query: query as string,
      },
    };
  }
};

export default Home;
